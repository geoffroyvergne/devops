---

- name: "Templating ingress service yml"
  template:
    src: ingress-dashboard.yml
    dest: $HOME/ingress-dashboard.yml
  register: ingress_service

- name: Instal dashboard
  shell: |
    #kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml
    #kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml
    kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/aio/deploy/recommended/kubernetes-dashboard.yaml


    kubectl -n kube-system patch service kubernetes-dashboard --type='json' -p '[{"op":"replace","path":"/spec/type","value":"NodePort"}]'
    kubectl -n kube-system patch service kubernetes-dashboard --type='json' -p '[{"op":"replace","path":"/spec/ports/0/nodePort","value":{{ k8s_dashboard_port }} }]'
    touch $HOME/dashboard.initialized
  args:
    creates: dashboard.initialized
  changed_when: ingress_service is changed

#- name: "Install ingress dashboard"
#  shell: |
#    kubectl apply -f $HOME/ingress-dashboard.yml
#    touch $HOME/ingress-dashboard.initialized
#  args:
#    creates: ingress-dashboard.initialized
#  changed_when: ingress_service is changed

- name: Create token for dashboard
  shell: |
    kubectl create serviceaccount cluster-admin-dashboard-sa
    kubectl create clusterrolebinding cluster-admin-dashboard-sa --clusterrole=cluster-admin --serviceaccount=default:cluster-admin-dashboard-sa

    TOKEN=$(kubectl describe secret $(kubectl -n kube-system get secret | awk '/^cluster-admin-dashboard-sa-token-/{print $1}') | awk '$1=="token:"{print $2}')
    touch $HOME/.kube/token
    echo $TOKEN > $HOME/.kube/token
  args:
    creates: .kube/token

- name: Register token
  shell: cat $HOME/.kube/token
  register: kube_token

- name: "Copy token and config locally"
  copy:
    content: "{{ kube_token.stdout }}"
    dest: $HOME/.kube/token
  delegate_to: "{{ item }}"
  become: false
  loop:
  - localhost
  #- kubernetes-ubuntu
  changed_when: kube_token is changed

- name: "Dashboard token : "
  debug:
    msg: "{{ kube_token.stdout }}"
  changed_when: kube_token is changed

# cat $HOME/.kube/token | pbcopy

#- name: "wait for Dashboard"
#  wait_for:
#    host: 192.168.33.16
#    port: "{{ k8s_dashboard_port }}"
#    delay: 10
#    state: drained

#- name: "wait for Dashboard to come up"
#  uri:
#    url: "https://192.168.33.16:{{ k8s_dashboard_port }}/#!/login"
#    status_code: 200
#    validate_certs: False
#    register: result
#    until: result | succeeded
#    retries: 100
#    delay: 1